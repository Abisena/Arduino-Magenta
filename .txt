const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const port = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: true }));

let lightStatus = false; // Status awal lampu

app.get("/update_light", (req, res) => {
  const onLightStatus = true;
  const offLightStatus = false;

  if (lightStatus == onLightStatus) {
    lightStatus = offLightStatus;
  } else {
    lightStatus = onLightStatus;
  }

  console.log("Status lampu otomatis diperbarui:", lightStatus);

  res.json({ message: "Status lampu otomatis diperbarui" });
});

app.get("/get_light_status", (req, res) => {
  res.json({ lightStatus });
});

app.listen(port, () => {
  console.log(`Server berjalan di http://localhost:${port}`);
});




const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const port = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: true }));

let lightStatus = "Mati"; // Status awal lampu

app.get("/update_light", (req, res) => {
  const { value } = req.query;

  // Gantilah logika sesuai kebutuhan Anda
  if (value > 250) {
    lightStatus = "Nyala";
  } else {
    lightStatus = "Mati";
  }

  console.log("Status lampu otomatis diperbarui:", lightStatus);

  // Kirim respons dengan status lampu yang diperbarui
  res.json({ message: "Status lampu otomatis diperbarui", lightStatus });
});

app.get("/get_light_status", (req, res) => {
  // Kirim status lampu yang diperoleh dari Arduino
  res.json({ lightStatus });
});

app.listen(port, () => {
  console.log(`Server berjalan di http://localhost:${port}`);
});





19-09-2023

// Fungsi untuk mendapatkan data lampu berdasarkan ID
export const getLampById = async (req, res) => {
  try {
    const { id } = req.params;
    const lamp = await Lamp.findById(id);
    if (!lamp) {
      return res.status(404).json({ error: "Data lampu tidak ditemukan." });
    }
    res.status(200).json(lamp);
  } catch (error) {
    res.status(500).json({ error: "Gagal mendapatkan data lampu." });
  }
};

// Fungsi untuk memperbarui data lampu berdasarkan ID
export const updateLampById = async (req, res) => {
  try {
    const { id } = req.params;
    const updatedLamp = await Lamp.findByIdAndUpdate(id, req.body, {
      new: true,
    });
    if (!updatedLamp) {
      return res.status(404).json({ error: "Data lampu tidak ditemukan." });
    }
    res.status(200).json(updatedLamp);
  } catch (error) {
    res.status(500).json({ error: "Gagal memperbarui data lampu." });
  }
};

// Fungsi untuk menghapus data lampu berdasarkan ID
export const deleteLampById = async (req, res) => {
  try {
    const { id } = req.params;
    const deletedLamp = await Lamp.findByIdAndDelete(id);
    if (!deletedLamp) {
      return res.status(404).json({ error: "Data lampu tidak ditemukan." });
    }
    res.status(200).json({ message: "Data lampu berhasil dihapus." });
  } catch (error) {
    res.status(500).json({ error: "Gagal menghapus data lampu." });
  }
};
